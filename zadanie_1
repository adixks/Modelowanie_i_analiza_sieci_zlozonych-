import networkx as nx
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os

# Funkcja do generowania i analizy grafów
def analyze_graph(model_name, graph, params):
    # Obliczenie metryk
    avg_path_length = nx.average_shortest_path_length(graph) if nx.is_connected(graph) else None
    clustering_coefficient = nx.average_clustering(graph)
    degree_sequence = [d for _, d in graph.degree()]
    degree_distribution = pd.Series(degree_sequence).value_counts(normalize=True).sort_index()

    # Przygotowanie wyników
    results = {
        "Model": model_name,
        "Parameters": str(params),
        "Nodes": graph.number_of_nodes(),
        "Edges": graph.number_of_edges(),
        "Average Path Length": avg_path_length,
        "Clustering Coefficient": clustering_coefficient,
        "Degree Distribution": degree_distribution.to_dict()
    }
    return results

# Ustawienia eksperymentu
n = 6000  # Liczba wierzchołków
experiments = []

# Erdős-Rényi (Random Graph)
for p in [0.001, 0.005, 0.01]:
    graph = nx.erdos_renyi_graph(n, p)
    results = analyze_graph("Erdős-Rényi", graph, {"p": p})
    experiments.append(results)

# Barabási-Albert (Scale-Free)
for m in [1, 3, 5]:
    graph = nx.barabasi_albert_graph(n, m)
    results = analyze_graph("Barabási-Albert", graph, {"m": m})
    experiments.append(results)

# Watts-Strogatz (Small-World)
for k in [4, 6, 8]:
    for p in [0.1, 0.3, 0.5]:
        graph = nx.watts_strogatz_graph(n, k, p)
        results = analyze_graph("Watts-Strogatz", graph, {"k": k, "p": p})
        experiments.append(results)

# Zapis wyników do CSV
output_dir = "graph_experiments"
os.makedirs(output_dir, exist_ok=True)
summary = pd.DataFrame(experiments)
summary_path = os.path.join(output_dir, "summary.csv")
summary.to_csv(summary_path, index=False)

# Zapis rozkładów stopni do osobnych plików CSV
for i, result in enumerate(experiments):
    degree_distribution = pd.DataFrame(list(result["Degree Distribution"].items()), columns=["Degree", "Frequency"])
    degree_distribution_path = os.path.join(output_dir, f"degree_distribution_{result['Model']}_{i}.csv")
    degree_distribution.to_csv(degree_distribution_path, index=False)

# Wyświetlenie podsumowania
print(f"Wyniki zapisano w katalogu: {output_dir}")
